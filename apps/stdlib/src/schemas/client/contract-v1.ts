// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Key, KeyT } from '../../schemas/client/key';


export class ContractV1 implements flatbuffers.IUnpackableObject<ContractV1T> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ContractV1 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsContractV1(bb:flatbuffers.ByteBuffer, obj?:ContractV1):ContractV1 {
  return (obj || new ContractV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsContractV1(bb:flatbuffers.ByteBuffer, obj?:ContractV1):ContractV1 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ContractV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key(obj?:Key):Key|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Key()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

parameters(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

parametersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

parametersArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

version():string|null
version(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
version(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startContractV1(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addParameters(builder:flatbuffers.Builder, parametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, parametersOffset, 0);
}

static createParametersVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startParametersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, versionOffset, 0);
}

static endContractV1(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createContractV1(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, dataOffset:flatbuffers.Offset, parametersOffset:flatbuffers.Offset, versionOffset:flatbuffers.Offset):flatbuffers.Offset {
  ContractV1.startContractV1(builder);
  ContractV1.addKey(builder, keyOffset);
  ContractV1.addData(builder, dataOffset);
  ContractV1.addParameters(builder, parametersOffset);
  ContractV1.addVersion(builder, versionOffset);
  return ContractV1.endContractV1(builder);
}

unpack(): ContractV1T {
  return new ContractV1T(
    (this.key() !== null ? this.key()!.unpack() : null),
    this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength()),
    this.bb!.createScalarList<number>(this.parameters.bind(this), this.parametersLength()),
    this.version()
  );
}


unpackTo(_o: ContractV1T): void {
  _o.key = (this.key() !== null ? this.key()!.unpack() : null);
  _o.data = this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength());
  _o.parameters = this.bb!.createScalarList<number>(this.parameters.bind(this), this.parametersLength());
  _o.version = this.version();
}
}

export class ContractV1T implements flatbuffers.IGeneratedObject {
constructor(
  public key: KeyT|null = null,
  public data: (number)[] = [],
  public parameters: (number)[] = [],
  public version: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? this.key!.pack(builder) : 0);
  const data = ContractV1.createDataVector(builder, this.data);
  const parameters = ContractV1.createParametersVector(builder, this.parameters);
  const version = (this.version !== null ? builder.createString(this.version!) : 0);

  return ContractV1.createContractV1(builder,
    key,
    data,
    parameters,
    version
  );
}
}
