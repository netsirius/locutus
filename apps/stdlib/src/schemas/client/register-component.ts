// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Component, ComponentT } from '../../schemas/client/component';


export class RegisterComponent implements flatbuffers.IUnpackableObject<RegisterComponentT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RegisterComponent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRegisterComponent(bb:flatbuffers.ByteBuffer, obj?:RegisterComponent):RegisterComponent {
  return (obj || new RegisterComponent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRegisterComponent(bb:flatbuffers.ByteBuffer, obj?:RegisterComponent):RegisterComponent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RegisterComponent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

component(obj?:Component):Component|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Component()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

cipher(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

cipherLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

cipherArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

nonce(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

nonceLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

nonceArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startRegisterComponent(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addComponent(builder:flatbuffers.Builder, componentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, componentOffset, 0);
}

static addCipher(builder:flatbuffers.Builder, cipherOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, cipherOffset, 0);
}

static createCipherVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startCipherVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addNonce(builder:flatbuffers.Builder, nonceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nonceOffset, 0);
}

static createNonceVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startNonceVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endRegisterComponent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRegisterComponent(builder:flatbuffers.Builder, componentOffset:flatbuffers.Offset, cipherOffset:flatbuffers.Offset, nonceOffset:flatbuffers.Offset):flatbuffers.Offset {
  RegisterComponent.startRegisterComponent(builder);
  RegisterComponent.addComponent(builder, componentOffset);
  RegisterComponent.addCipher(builder, cipherOffset);
  RegisterComponent.addNonce(builder, nonceOffset);
  return RegisterComponent.endRegisterComponent(builder);
}

unpack(): RegisterComponentT {
  return new RegisterComponentT(
    (this.component() !== null ? this.component()!.unpack() : null),
    this.bb!.createScalarList<number>(this.cipher.bind(this), this.cipherLength()),
    this.bb!.createScalarList<number>(this.nonce.bind(this), this.nonceLength())
  );
}


unpackTo(_o: RegisterComponentT): void {
  _o.component = (this.component() !== null ? this.component()!.unpack() : null);
  _o.cipher = this.bb!.createScalarList<number>(this.cipher.bind(this), this.cipherLength());
  _o.nonce = this.bb!.createScalarList<number>(this.nonce.bind(this), this.nonceLength());
}
}

export class RegisterComponentT implements flatbuffers.IGeneratedObject {
constructor(
  public component: ComponentT|null = null,
  public cipher: (number)[] = [],
  public nonce: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const component = (this.component !== null ? this.component!.pack(builder) : 0);
  const cipher = RegisterComponent.createCipherVector(builder, this.cipher);
  const nonce = RegisterComponent.createNonceVector(builder, this.nonce);

  return RegisterComponent.createRegisterComponent(builder,
    component,
    cipher,
    nonce
  );
}
}
