// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ContractContainer, ContractContainerT } from '../../schemas/client/contract-container';
import { RelatedContracts, RelatedContractsT } from '../../schemas/client/related-contracts';
import { State, StateT } from '../../schemas/client/state';


export class Put implements flatbuffers.IUnpackableObject<PutT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Put {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPut(bb:flatbuffers.ByteBuffer, obj?:Put):Put {
  return (obj || new Put()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPut(bb:flatbuffers.ByteBuffer, obj?:Put):Put {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Put()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

container(obj?:ContractContainer):ContractContainer|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContractContainer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

state(obj?:State):State|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new State()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

relatedContracts(obj?:RelatedContracts):RelatedContracts|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new RelatedContracts()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startPut(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addContainer(builder:flatbuffers.Builder, containerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, containerOffset, 0);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stateOffset, 0);
}

static addRelatedContracts(builder:flatbuffers.Builder, relatedContractsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, relatedContractsOffset, 0);
}

static endPut(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): PutT {
  return new PutT(
    (this.container() !== null ? this.container()!.unpack() : null),
    (this.state() !== null ? this.state()!.unpack() : null),
    (this.relatedContracts() !== null ? this.relatedContracts()!.unpack() : null)
  );
}


unpackTo(_o: PutT): void {
  _o.container = (this.container() !== null ? this.container()!.unpack() : null);
  _o.state = (this.state() !== null ? this.state()!.unpack() : null);
  _o.relatedContracts = (this.relatedContracts() !== null ? this.relatedContracts()!.unpack() : null);
}
}

export class PutT implements flatbuffers.IGeneratedObject {
constructor(
  public container: ContractContainerT|null = null,
  public state: StateT|null = null,
  public relatedContracts: RelatedContractsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const container = (this.container !== null ? this.container!.pack(builder) : 0);
  const state = (this.state !== null ? this.state!.pack(builder) : 0);
  const relatedContracts = (this.relatedContracts !== null ? this.relatedContracts!.pack(builder) : 0);

  Put.startPut(builder);
  Put.addContainer(builder, container);
  Put.addState(builder, state);
  Put.addRelatedContracts(builder, relatedContracts);

  return Put.endPut(builder);
}
}
