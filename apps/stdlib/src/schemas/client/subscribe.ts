// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Key, KeyT } from '../../schemas/client/key';


export class Subscribe implements flatbuffers.IUnpackableObject<SubscribeT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Subscribe {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSubscribe(bb:flatbuffers.ByteBuffer, obj?:Subscribe):Subscribe {
  return (obj || new Subscribe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSubscribe(bb:flatbuffers.ByteBuffer, obj?:Subscribe):Subscribe {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Subscribe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key(obj?:Key):Key|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Key()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSubscribe(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static endSubscribe(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSubscribe(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset):flatbuffers.Offset {
  Subscribe.startSubscribe(builder);
  Subscribe.addKey(builder, keyOffset);
  return Subscribe.endSubscribe(builder);
}

unpack(): SubscribeT {
  return new SubscribeT(
    (this.key() !== null ? this.key()!.unpack() : null)
  );
}


unpackTo(_o: SubscribeT): void {
  _o.key = (this.key() !== null ? this.key()!.unpack() : null);
}
}

export class SubscribeT implements flatbuffers.IGeneratedObject {
constructor(
  public key: KeyT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? this.key!.pack(builder) : 0);

  return Subscribe.createSubscribe(builder,
    key
  );
}
}
