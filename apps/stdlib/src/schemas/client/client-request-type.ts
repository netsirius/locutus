// automatically generated by the FlatBuffers compiler, do not modify

import { ComponentRequest, ComponentRequestT } from '../../schemas/client/component-request';
import { ContractRequest, ContractRequestT } from '../../schemas/client/contract-request';
import { Disconnect, DisconnectT } from '../../schemas/client/disconnect';
import { GenerateRandData, GenerateRandDataT } from '../../schemas/client/generate-rand-data';


export enum ClientRequestType {
  NONE = 0,
  ContractRequest = 1,
  ComponentRequest = 2,
  GenerateRandData = 3,
  Disconnect = 4
}

export function unionToClientRequestType(
  type: ClientRequestType,
  accessor: (obj:ComponentRequest|ContractRequest|Disconnect|GenerateRandData) => ComponentRequest|ContractRequest|Disconnect|GenerateRandData|null
): ComponentRequest|ContractRequest|Disconnect|GenerateRandData|null {
  switch(ClientRequestType[type]) {
    case 'NONE': return null; 
    case 'ContractRequest': return accessor(new ContractRequest())! as ContractRequest;
    case 'ComponentRequest': return accessor(new ComponentRequest())! as ComponentRequest;
    case 'GenerateRandData': return accessor(new GenerateRandData())! as GenerateRandData;
    case 'Disconnect': return accessor(new Disconnect())! as Disconnect;
    default: return null;
  }
}

export function unionListToClientRequestType(
  type: ClientRequestType, 
  accessor: (index: number, obj:ComponentRequest|ContractRequest|Disconnect|GenerateRandData) => ComponentRequest|ContractRequest|Disconnect|GenerateRandData|null, 
  index: number
): ComponentRequest|ContractRequest|Disconnect|GenerateRandData|null {
  switch(ClientRequestType[type]) {
    case 'NONE': return null; 
    case 'ContractRequest': return accessor(index, new ContractRequest())! as ContractRequest;
    case 'ComponentRequest': return accessor(index, new ComponentRequest())! as ComponentRequest;
    case 'GenerateRandData': return accessor(index, new GenerateRandData())! as GenerateRandData;
    case 'Disconnect': return accessor(index, new Disconnect())! as Disconnect;
    default: return null;
  }
}
