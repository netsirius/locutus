// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class UserResponse implements flatbuffers.IUnpackableObject<UserResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UserResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUserResponse(bb:flatbuffers.ByteBuffer, obj?:UserResponse):UserResponse {
  return (obj || new UserResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUserResponse(bb:flatbuffers.ByteBuffer, obj?:UserResponse):UserResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UserResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

requestId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

response(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

responseLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

responseArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startUserResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRequestId(builder:flatbuffers.Builder, requestId:number) {
  builder.addFieldInt32(0, requestId, 0);
}

static addResponse(builder:flatbuffers.Builder, responseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, responseOffset, 0);
}

static createResponseVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startResponseVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endUserResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUserResponse(builder:flatbuffers.Builder, requestId:number, responseOffset:flatbuffers.Offset):flatbuffers.Offset {
  UserResponse.startUserResponse(builder);
  UserResponse.addRequestId(builder, requestId);
  UserResponse.addResponse(builder, responseOffset);
  return UserResponse.endUserResponse(builder);
}

unpack(): UserResponseT {
  return new UserResponseT(
    this.requestId(),
    this.bb!.createScalarList<number>(this.response.bind(this), this.responseLength())
  );
}


unpackTo(_o: UserResponseT): void {
  _o.requestId = this.requestId();
  _o.response = this.bb!.createScalarList<number>(this.response.bind(this), this.responseLength());
}
}

export class UserResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public requestId: number = 0,
  public response: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const response = UserResponse.createResponseVector(builder, this.response);

  return UserResponse.createUserResponse(builder,
    this.requestId,
    response
  );
}
}
