// automatically generated by the FlatBuffers compiler, do not modify

import { ComponentResponse, ComponentResponseT } from '../../schemas/host/component-response';
import { ContractResponse, ContractResponseT } from '../../schemas/host/contract-response';
import { GenerateRandData, GenerateRandDataT } from '../../schemas/host/generate-rand-data';


export enum HostResponseType {
  NONE = 0,
  ContractResponse = 1,
  ComponentResponse = 2,
  GenerateRandData = 3
}

export function unionToHostResponseType(
  type: HostResponseType,
  accessor: (obj:ComponentResponse|ContractResponse|GenerateRandData) => ComponentResponse|ContractResponse|GenerateRandData|null
): ComponentResponse|ContractResponse|GenerateRandData|null {
  switch(HostResponseType[type]) {
    case 'NONE': return null; 
    case 'ContractResponse': return accessor(new ContractResponse())! as ContractResponse;
    case 'ComponentResponse': return accessor(new ComponentResponse())! as ComponentResponse;
    case 'GenerateRandData': return accessor(new GenerateRandData())! as GenerateRandData;
    default: return null;
  }
}

export function unionListToHostResponseType(
  type: HostResponseType, 
  accessor: (index: number, obj:ComponentResponse|ContractResponse|GenerateRandData) => ComponentResponse|ContractResponse|GenerateRandData|null, 
  index: number
): ComponentResponse|ContractResponse|GenerateRandData|null {
  switch(HostResponseType[type]) {
    case 'NONE': return null; 
    case 'ContractResponse': return accessor(index, new ContractResponse())! as ContractResponse;
    case 'ComponentResponse': return accessor(index, new ComponentResponse())! as ComponentResponse;
    case 'GenerateRandData': return accessor(index, new GenerateRandData())! as GenerateRandData;
    default: return null;
  }
}
