// automatically generated by the FlatBuffers compiler, do not modify

import { DeltaUpdate, DeltaUpdateT } from '../../schemas/host/delta-update';
import { DeltaWithContractInstanceUpdate, DeltaWithContractInstanceUpdateT } from '../../schemas/host/delta-with-contract-instance-update';
import { StateDeltaUpdate, StateDeltaUpdateT } from '../../schemas/host/state-delta-update';
import { StateDeltaWithContractInstanceUpdate, StateDeltaWithContractInstanceUpdateT } from '../../schemas/host/state-delta-with-contract-instance-update';
import { StateUpdate, StateUpdateT } from '../../schemas/host/state-update';
import { StateWithContractInstanceUpdate, StateWithContractInstanceUpdateT } from '../../schemas/host/state-with-contract-instance-update';


export enum UpdateDataType {
  NONE = 0,
  StateUpdate = 1,
  DeltaUpdate = 2,
  StateDeltaUpdate = 3,
  StateWithContractInstanceUpdate = 4,
  DeltaWithContractInstanceUpdate = 5,
  StateDeltaWithContractInstanceUpdate = 6
}

export function unionToUpdateDataType(
  type: UpdateDataType,
  accessor: (obj:DeltaUpdate|DeltaWithContractInstanceUpdate|StateDeltaUpdate|StateDeltaWithContractInstanceUpdate|StateUpdate|StateWithContractInstanceUpdate) => DeltaUpdate|DeltaWithContractInstanceUpdate|StateDeltaUpdate|StateDeltaWithContractInstanceUpdate|StateUpdate|StateWithContractInstanceUpdate|null
): DeltaUpdate|DeltaWithContractInstanceUpdate|StateDeltaUpdate|StateDeltaWithContractInstanceUpdate|StateUpdate|StateWithContractInstanceUpdate|null {
  switch(UpdateDataType[type]) {
    case 'NONE': return null; 
    case 'StateUpdate': return accessor(new StateUpdate())! as StateUpdate;
    case 'DeltaUpdate': return accessor(new DeltaUpdate())! as DeltaUpdate;
    case 'StateDeltaUpdate': return accessor(new StateDeltaUpdate())! as StateDeltaUpdate;
    case 'StateWithContractInstanceUpdate': return accessor(new StateWithContractInstanceUpdate())! as StateWithContractInstanceUpdate;
    case 'DeltaWithContractInstanceUpdate': return accessor(new DeltaWithContractInstanceUpdate())! as DeltaWithContractInstanceUpdate;
    case 'StateDeltaWithContractInstanceUpdate': return accessor(new StateDeltaWithContractInstanceUpdate())! as StateDeltaWithContractInstanceUpdate;
    default: return null;
  }
}

export function unionListToUpdateDataType(
  type: UpdateDataType, 
  accessor: (index: number, obj:DeltaUpdate|DeltaWithContractInstanceUpdate|StateDeltaUpdate|StateDeltaWithContractInstanceUpdate|StateUpdate|StateWithContractInstanceUpdate) => DeltaUpdate|DeltaWithContractInstanceUpdate|StateDeltaUpdate|StateDeltaWithContractInstanceUpdate|StateUpdate|StateWithContractInstanceUpdate|null, 
  index: number
): DeltaUpdate|DeltaWithContractInstanceUpdate|StateDeltaUpdate|StateDeltaWithContractInstanceUpdate|StateUpdate|StateWithContractInstanceUpdate|null {
  switch(UpdateDataType[type]) {
    case 'NONE': return null; 
    case 'StateUpdate': return accessor(index, new StateUpdate())! as StateUpdate;
    case 'DeltaUpdate': return accessor(index, new DeltaUpdate())! as DeltaUpdate;
    case 'StateDeltaUpdate': return accessor(index, new StateDeltaUpdate())! as StateDeltaUpdate;
    case 'StateWithContractInstanceUpdate': return accessor(index, new StateWithContractInstanceUpdate())! as StateWithContractInstanceUpdate;
    case 'DeltaWithContractInstanceUpdate': return accessor(index, new DeltaWithContractInstanceUpdate())! as DeltaWithContractInstanceUpdate;
    case 'StateDeltaWithContractInstanceUpdate': return accessor(index, new StateDeltaWithContractInstanceUpdate())! as StateDeltaWithContractInstanceUpdate;
    default: return null;
  }
}
