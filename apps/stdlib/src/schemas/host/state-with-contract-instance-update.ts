// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ContractInstanceId, ContractInstanceIdT } from '../../schemas/host/contract-instance-id';
import { State, StateT } from '../../schemas/host/state';


export class StateWithContractInstanceUpdate implements flatbuffers.IUnpackableObject<StateWithContractInstanceUpdateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StateWithContractInstanceUpdate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStateWithContractInstanceUpdate(bb:flatbuffers.ByteBuffer, obj?:StateWithContractInstanceUpdate):StateWithContractInstanceUpdate {
  return (obj || new StateWithContractInstanceUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStateWithContractInstanceUpdate(bb:flatbuffers.ByteBuffer, obj?:StateWithContractInstanceUpdate):StateWithContractInstanceUpdate {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StateWithContractInstanceUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

relatedTo(obj?:ContractInstanceId):ContractInstanceId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContractInstanceId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

state(obj?:State):State|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new State()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startStateWithContractInstanceUpdate(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRelatedTo(builder:flatbuffers.Builder, relatedToOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, relatedToOffset, 0);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stateOffset, 0);
}

static endStateWithContractInstanceUpdate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): StateWithContractInstanceUpdateT {
  return new StateWithContractInstanceUpdateT(
    (this.relatedTo() !== null ? this.relatedTo()!.unpack() : null),
    (this.state() !== null ? this.state()!.unpack() : null)
  );
}


unpackTo(_o: StateWithContractInstanceUpdateT): void {
  _o.relatedTo = (this.relatedTo() !== null ? this.relatedTo()!.unpack() : null);
  _o.state = (this.state() !== null ? this.state()!.unpack() : null);
}
}

export class StateWithContractInstanceUpdateT implements flatbuffers.IGeneratedObject {
constructor(
  public relatedTo: ContractInstanceIdT|null = null,
  public state: StateT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const relatedTo = (this.relatedTo !== null ? this.relatedTo!.pack(builder) : 0);
  const state = (this.state !== null ? this.state!.pack(builder) : 0);

  StateWithContractInstanceUpdate.startStateWithContractInstanceUpdate(builder);
  StateWithContractInstanceUpdate.addRelatedTo(builder, relatedTo);
  StateWithContractInstanceUpdate.addState(builder, state);

  return StateWithContractInstanceUpdate.endStateWithContractInstanceUpdate(builder);
}
}
