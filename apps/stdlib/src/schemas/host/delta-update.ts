// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { StateDelta, StateDeltaT } from '../../schemas/host/state-delta';


export class DeltaUpdate implements flatbuffers.IUnpackableObject<DeltaUpdateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DeltaUpdate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDeltaUpdate(bb:flatbuffers.ByteBuffer, obj?:DeltaUpdate):DeltaUpdate {
  return (obj || new DeltaUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDeltaUpdate(bb:flatbuffers.ByteBuffer, obj?:DeltaUpdate):DeltaUpdate {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DeltaUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

delta(obj?:StateDelta):StateDelta|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new StateDelta()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDeltaUpdate(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addDelta(builder:flatbuffers.Builder, deltaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, deltaOffset, 0);
}

static endDeltaUpdate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDeltaUpdate(builder:flatbuffers.Builder, deltaOffset:flatbuffers.Offset):flatbuffers.Offset {
  DeltaUpdate.startDeltaUpdate(builder);
  DeltaUpdate.addDelta(builder, deltaOffset);
  return DeltaUpdate.endDeltaUpdate(builder);
}

unpack(): DeltaUpdateT {
  return new DeltaUpdateT(
    (this.delta() !== null ? this.delta()!.unpack() : null)
  );
}


unpackTo(_o: DeltaUpdateT): void {
  _o.delta = (this.delta() !== null ? this.delta()!.unpack() : null);
}
}

export class DeltaUpdateT implements flatbuffers.IGeneratedObject {
constructor(
  public delta: StateDeltaT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const delta = (this.delta !== null ? this.delta!.pack(builder) : 0);

  return DeltaUpdate.createDeltaUpdate(builder,
    delta
  );
}
}
