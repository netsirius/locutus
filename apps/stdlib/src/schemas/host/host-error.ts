// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class HostError implements flatbuffers.IUnpackableObject<HostErrorT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HostError {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHostError(bb:flatbuffers.ByteBuffer, obj?:HostError):HostError {
  return (obj || new HostError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHostError(bb:flatbuffers.ByteBuffer, obj?:HostError):HostError {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HostError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cause():string|null
cause(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cause(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startHostError(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addCause(builder:flatbuffers.Builder, causeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, causeOffset, 0);
}

static endHostError(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHostError(builder:flatbuffers.Builder, causeOffset:flatbuffers.Offset):flatbuffers.Offset {
  HostError.startHostError(builder);
  HostError.addCause(builder, causeOffset);
  return HostError.endHostError(builder);
}

unpack(): HostErrorT {
  return new HostErrorT(
    this.cause()
  );
}


unpackTo(_o: HostErrorT): void {
  _o.cause = this.cause();
}
}

export class HostErrorT implements flatbuffers.IGeneratedObject {
constructor(
  public cause: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cause = (this.cause !== null ? builder.createString(this.cause!) : 0);

  return HostError.createHostError(builder,
    cause
  );
}
}
