// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { State, StateT } from '../../schemas/host/state';


export class StateUpdate implements flatbuffers.IUnpackableObject<StateUpdateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StateUpdate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStateUpdate(bb:flatbuffers.ByteBuffer, obj?:StateUpdate):StateUpdate {
  return (obj || new StateUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStateUpdate(bb:flatbuffers.ByteBuffer, obj?:StateUpdate):StateUpdate {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StateUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

state(obj?:State):State|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new State()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startStateUpdate(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stateOffset, 0);
}

static endStateUpdate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStateUpdate(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset):flatbuffers.Offset {
  StateUpdate.startStateUpdate(builder);
  StateUpdate.addState(builder, stateOffset);
  return StateUpdate.endStateUpdate(builder);
}

unpack(): StateUpdateT {
  return new StateUpdateT(
    (this.state() !== null ? this.state()!.unpack() : null)
  );
}


unpackTo(_o: StateUpdateT): void {
  _o.state = (this.state() !== null ? this.state()!.unpack() : null);
}
}

export class StateUpdateT implements flatbuffers.IGeneratedObject {
constructor(
  public state: StateT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const state = (this.state !== null ? this.state!.pack(builder) : 0);

  return StateUpdate.createStateUpdate(builder,
    state
  );
}
}
