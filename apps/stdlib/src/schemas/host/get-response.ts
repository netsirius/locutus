// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ContractContainer, ContractContainerT } from '../../schemas/host/contract-container';
import { State, StateT } from '../../schemas/host/state';


export class GetResponse implements flatbuffers.IUnpackableObject<GetResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetResponse(bb:flatbuffers.ByteBuffer, obj?:GetResponse):GetResponse {
  return (obj || new GetResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetResponse(bb:flatbuffers.ByteBuffer, obj?:GetResponse):GetResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

contract(obj?:ContractContainer):ContractContainer|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContractContainer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

state(obj?:State):State|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new State()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addContract(builder:flatbuffers.Builder, contractOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, contractOffset, 0);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stateOffset, 0);
}

static endGetResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): GetResponseT {
  return new GetResponseT(
    (this.contract() !== null ? this.contract()!.unpack() : null),
    (this.state() !== null ? this.state()!.unpack() : null)
  );
}


unpackTo(_o: GetResponseT): void {
  _o.contract = (this.contract() !== null ? this.contract()!.unpack() : null);
  _o.state = (this.state() !== null ? this.state()!.unpack() : null);
}
}

export class GetResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public contract: ContractContainerT|null = null,
  public state: StateT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const contract = (this.contract !== null ? this.contract!.pack(builder) : 0);
  const state = (this.state !== null ? this.state!.pack(builder) : 0);

  GetResponse.startGetResponse(builder);
  GetResponse.addContract(builder, contract);
  GetResponse.addState(builder, state);

  return GetResponse.endGetResponse(builder);
}
}
