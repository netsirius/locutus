// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ContractInstanceId, ContractInstanceIdT } from '../../schemas/host/contract-instance-id';
import { StateDelta, StateDeltaT } from '../../schemas/host/state-delta';


export class DeltaWithContractInstanceUpdate implements flatbuffers.IUnpackableObject<DeltaWithContractInstanceUpdateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DeltaWithContractInstanceUpdate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDeltaWithContractInstanceUpdate(bb:flatbuffers.ByteBuffer, obj?:DeltaWithContractInstanceUpdate):DeltaWithContractInstanceUpdate {
  return (obj || new DeltaWithContractInstanceUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDeltaWithContractInstanceUpdate(bb:flatbuffers.ByteBuffer, obj?:DeltaWithContractInstanceUpdate):DeltaWithContractInstanceUpdate {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DeltaWithContractInstanceUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

relatedTo(obj?:ContractInstanceId):ContractInstanceId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContractInstanceId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

delta(obj?:StateDelta):StateDelta|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new StateDelta()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDeltaWithContractInstanceUpdate(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRelatedTo(builder:flatbuffers.Builder, relatedToOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, relatedToOffset, 0);
}

static addDelta(builder:flatbuffers.Builder, deltaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, deltaOffset, 0);
}

static endDeltaWithContractInstanceUpdate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): DeltaWithContractInstanceUpdateT {
  return new DeltaWithContractInstanceUpdateT(
    (this.relatedTo() !== null ? this.relatedTo()!.unpack() : null),
    (this.delta() !== null ? this.delta()!.unpack() : null)
  );
}


unpackTo(_o: DeltaWithContractInstanceUpdateT): void {
  _o.relatedTo = (this.relatedTo() !== null ? this.relatedTo()!.unpack() : null);
  _o.delta = (this.delta() !== null ? this.delta()!.unpack() : null);
}
}

export class DeltaWithContractInstanceUpdateT implements flatbuffers.IGeneratedObject {
constructor(
  public relatedTo: ContractInstanceIdT|null = null,
  public delta: StateDeltaT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const relatedTo = (this.relatedTo !== null ? this.relatedTo!.pack(builder) : 0);
  const delta = (this.delta !== null ? this.delta!.pack(builder) : 0);

  DeltaWithContractInstanceUpdate.startDeltaWithContractInstanceUpdate(builder);
  DeltaWithContractInstanceUpdate.addRelatedTo(builder, relatedTo);
  DeltaWithContractInstanceUpdate.addDelta(builder, delta);

  return DeltaWithContractInstanceUpdate.endDeltaWithContractInstanceUpdate(builder);
}
}
