namespace schemas.client;

table ContractInstanceId {
    data:[ubyte];
}

table Key {
  instance:ContractInstanceId;
  code:[ubyte];
}

table ComponentKey {
  data:[ubyte];
}

table SecretsId {
    key: [ubyte];
    hash: [ubyte];
}

table ContractV1 {
  key:Key;
  data:[ubyte];
  parameters:[ubyte];
  version:string;
}

union WasmContract {
  ContractV1
}

table ContractContainer {
  contract:WasmContract;
}

table State {
  data:[ubyte];
}

table StateDelta {
  data:[ubyte];
}

table StateSummary {
  data: [ubyte];
}

table StateUpdate {
  state:State;
}

table DeltaUpdate {
  delta:StateDelta;
}

table StateDeltaUpdate {
  state:State;
  delta:StateDelta;
}

table StateWithContractInstanceUpdate {
  related_to:ContractInstanceId;
  state:State;
}

table DeltaWithContractInstanceUpdate {
  related_to:ContractInstanceId;
  delta:StateDelta;
}

table StateDeltaWithContractInstanceUpdate {
  related_to:ContractInstanceId;
  state:State;
  delta:StateDelta;
}

union UpdateDataType {
  StateUpdate,
  DeltaUpdate,
  StateDeltaUpdate,
  StateWithContractInstanceUpdate,
  DeltaWithContractInstanceUpdate,
  StateDeltaWithContractInstanceUpdate
}

table UpdateData {
    update_data: UpdateDataType;
}

table RelatedContract {
  instance_id:ContractInstanceId;
  state:State;
}

table RelatedContracts {
  contracts:[RelatedContract];
}

table Put {
  container:ContractContainer;
  state:State;
  related_contracts:RelatedContracts;
}

table Update {
  key:Key;
  data:UpdateData;
}

table Get {
  key:Key;
  fetch_contract:bool;
}

table Subscribe {
  key:Key;
}

union ContractRequestType {
  Put,
  Update,
  Get,
  Subscribe
}

table Component {
    code: [ubyte];
    key: ComponentKey;
}

table ApplicationMessage {
    app: ContractInstanceId;
    payload: [ubyte];
    context: [ubyte];
    processed: bool;
}

table GetSecretResponse {
    key: SecretsId;
    value: [ubyte];
    context: [ubyte];
}

table RandomBytes {
    data: [ubyte];
}

table UserResponse {
    request_id: int;
    response: [ubyte];
}

union InboundComponentMsgType {
    ApplicationMessage,
    GetSecretResponse,
    RandomBytes,
    UserResponse
}

table InboundComponentMsg {
    inbound: InboundComponentMsgType;
}

table ApplicationMessages {
    key: ComponentKey;
    inbound: [InboundComponentMsg];
}

table RegisterComponent {
    component: Component;
    cipher: [ubyte];
    nonce: [ubyte];
}

table UnregisterComponent {
    data: [ubyte];
}

union ComponentRequestType {
  ApplicationMessages,
  RegisterComponent,
  UnregisterComponent
}


table ContractRequest {
  contract_request: ContractRequestType;
}

table ComponentRequest {
  component_request: ComponentRequestType;
}

table GenerateRandData {
  bytes: int;
}

table Disconnect {
  cause:string;
}

union ClientRequestType {
    ContractRequest,
    ComponentRequest,
    GenerateRandData,
    Disconnect
}

table ClientRequest {
    client_request: ClientRequestType(required);
}

root_type ClientRequest;